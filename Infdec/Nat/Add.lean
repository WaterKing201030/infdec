import Infdec.Nat.NatOrder

namespace wkmath
namespace Digits
def add''(x:Digits)(d:Digit):=
  match x with
  | ε => match d with
    | (0) => ε
    | (1) => ε::(1)
    | (2) => ε::(2)
  | x'::xd => (x'.add'' (xd.half_add3 d (0)).fst)::(xd.half_add3 d (0)).snd

section add''_property
@[simp] theorem add''.add_zero(x:Digits):x.add'' (0) = x:=by{
  induction x with
  | nil => simp
  | cons x' xd ih => simp[add'', Digit.half_add3.add_zero_zero]; exact ih
}

theorem add''.carry_comm(x:Digits)(c d:Digit):(x.add'' c).add'' d=(x.add'' d).add'' c:=by{
  match c, d with
  | _, (0)
  | (0), _
  | (1), (1)
  | (2), (2) => simp
  | (1), (2)
  | (2), (1) => {
    match x with
    | ε => simp[add'', Digit.half_add3]
    | x'::xd => {
      simp[add'']
      match xd with
      | (0)
      | (1)
      | (2) => simp[Digit.half_add3]
    }
  }
}

theorem add''.one_one_eq_two(x:Digits):(x.add'' (1)).add'' (1) = x.add'' (2):=by{
  match x with
  | ε => simp[add'']
  | x'::xd => {
    simp[add'']
    match xd with
    | (0) | (1) | (2) => simp[Digit.half_add3]
  }
}

theorem add''.carry_cancel{x:Digits}{c d:Digit}(h:x.add'' c = x.add'' d):c = d:=by{
  match x with
  | ε => {
    match c, d with
    | (0), (0)
    | (0), (1)
    | (0), (2)
    | (1), (0)
    | (1), (1)
    | (1), (2)
    | (2), (0)
    | (2), (1)
    | (2), (2) => simp[add''] at *
  }
  | x'::xd => {
    simp[add''] at h
    have h:=h.right
    exact Digit.half_add3.snd_cancel' h
  }
}

theorem add''.not_ε{x:Digits}{d:Digit}(h:x.add'' d=ε):x=ε∧d=(0):=by{
  cases x with
  | nil => cases d with
    | zero => simp
    | one
    | two => contradiction
  | cons _ _ => contradiction
}

theorem add''.not_ε'{x:Digits}{d:Digit}(h:x≠ε):x.add'' d≠ε:=by{
  intro h'
  have h':=not_ε h'
  exact h h'.left
}

theorem add''.not_ε''{x:Digits}{d:Digit}(h:d≠(0)):x.add'' d≠ε:=by{
  intro h'
  have h':=not_ε h'
  exact h h'.right
}
end add''_property

def add'(x y:Digits)(c:Digit):Digits:=
  match x, y with
  | ε, ε => nil.add'' c
  | ε, ds::d
  | ds::d, ε => (ds::d).add'' c
  | xs::xd, ys::yd => (add' xs ys (xd.half_add3 yd c).fst)::(xd.half_add3 yd c).snd

section add'_property
@[simp] theorem add'.add_ε(x:Digits)(c:Digit):add' x ε c = x.add'' c:=by{
  cases x with | nil | cons _ _ => rw[add']
}

@[simp] theorem add'.ε_add(x:Digits)(c:Digit):add' ε x c = x.add'' c:=by{
  cases x with | nil | cons _ _ => rw[add']
}

theorem add'.comm(x y:Digits)(c:Digit):add' x y c = add' y x c:=by{
  match x, y with
  | ε, _
  | _::_, ε => simp
  | x'::xd, y'::yd => {
    have h1:=Digit.half_add3.comm12 xd yd c
    simp[add', h1]
    exact comm _ _ _
  }
}

theorem add'_add''_one_zero_eq_one(x y:Digits):add' (x.add'' (1)) y (0) = add' x y (1):=by{
  match x, y with
  | _, ε => simp
  | ε, _::_ => simp[add',add'',Digit.half_add3.comm12]
  | x'::xd, y'::yd => {
    match xd, yd with
    | (0), (0)
    | (0), (1)
    | (0), (2)
    | (1), (0)
    | (1), (1)
    | (1), (2)
    | (2), (0)
    | (2), (1)
    | (2), (2) => simp[add', add'', Digit.half_add3, add'_add''_one_zero_eq_one]
  }
}

theorem add''_add'_zero_one_eq_one(x y:Digits):add'' (add' x y (0)) (1) = add' x y (1):=by{
  match x, y with
  | _, ε => simp
  | ε, _::_ => simp[add',add'',Digit.half_add3.comm12, Digit.half_add3.add_zero_zero]
  | x'::xd, y'::yd => {
    match xd, yd with
    | (0), (0)
    | (0), (1)
    | (0), (2)
    | (1), (0)
    | (1), (1)
    | (1), (2)
    | (2), (0)
    | (2), (1)
    | (2), (2) => simp[add', add'', Digit.half_add3, add''_add'_zero_one_eq_one]
  }
}

theorem add'_add''_one_one_eq_two(x y:Digits):add' (x.add'' (1)) y (1) = add' x y (2):=by{
  match x, y with
  | _, ε => simp; exact add''.one_one_eq_two _
  | ε, _::_ => {
    simp[add',add'']
    rw[Digit.half_add3.comm12 (1)]
    rw[Digit.half_add3.one_one_eq_zero_two]
    rw[Digit.half_add3.comm23]
    simp
  }
  | _::xd, _::yd => {
    match xd, yd with
    | (0), (0)
    | (0), (1)
    | (0), (2)
    | (1), (0)
    | (1), (1)
    | (1), (2)
    | (2), (0)
    | (2), (1)
    | (2), (2) => simp[add', add'', Digit.half_add3, add'_add''_one_zero_eq_one, add'_add''_one_one_eq_two]
  }
}

theorem add''_add'_one_one_eq_two(x y:Digits):add'' (add' x y (1)) (1) = add' x y (2):=by{
  match x, y with
  | _, ε => simp; exact add''.one_one_eq_two _
  | ε, _::d => {
    simp[add',add'']
    match d with
    | (0) | (1) | (2) => simp[Digit.half_add3]
  }
  | _::xd, _::yd => {
    match xd, yd with
    | (0), (0)
    | (0), (1)
    | (0), (2)
    | (1), (0)
    | (1), (1)
    | (1), (2)
    | (2), (0)
    | (2), (1)
    | (2), (2) => simp[add', add'', Digit.half_add3, add''_add'_zero_one_eq_one, add''_add'_one_one_eq_two]
  }
}

theorem add'_add''_carry_comm(x y:Digits)(c d:Digit):add' (x.add'' c) y d = add' (x.add'' d) y c:=by{
  match x, y with
  | _, ε => simp; exact add''.carry_comm _ _ _
  | ε, y'::yd => {
    match c, d with
    | (0), (0)
    | (1), (1)
    | (2), (2) => simp
    | (0), (1)
    | (0), (2)
    | (1), (0)
    | (2), (0) => {
      simp[add'',add']
      rw[Digit.half_add3.comm12]
      simp
    }
    | (1), (2)
    | (2), (1) => {
      simp[add'',add']
      rw[Digit.half_add3.comm13]
      simp
    }
  }
  | x'::xd, y'::yd => {
    simp[add'', add']
    match xd, yd, c, d with
    | (0), (0), (0), (0)
    | (0), (0), (0), (1)
    | (0), (0), (0), (2)
    | (0), (0), (1), (0)
    | (0), (0), (1), (1)
    | (0), (0), (1), (2)
    | (0), (0), (2), (0)
    | (0), (0), (2), (1)
    | (0), (0), (2), (2)
    | (0), (1), (0), (0)
    | (0), (1), (0), (1)
    | (0), (1), (0), (2)
    | (0), (1), (1), (0)
    | (0), (1), (1), (1)
    | (0), (1), (1), (2)
    | (0), (1), (2), (0)
    | (0), (1), (2), (1)
    | (0), (1), (2), (2)
    | (0), (2), (0), (0)
    | (0), (2), (0), (1)
    | (0), (2), (0), (2)
    | (0), (2), (1), (0)
    | (0), (2), (1), (1)
    | (0), (2), (1), (2)
    | (0), (2), (2), (0)
    | (0), (2), (2), (1)
    | (0), (2), (2), (2)
    | (1), (0), (0), (0)
    | (1), (0), (0), (1)
    | (1), (0), (0), (2)
    | (1), (0), (1), (0)
    | (1), (0), (1), (1)
    | (1), (0), (1), (2)
    | (1), (0), (2), (0)
    | (1), (0), (2), (1)
    | (1), (0), (2), (2)
    | (1), (1), (0), (0)
    | (1), (1), (0), (1)
    | (1), (1), (0), (2)
    | (1), (1), (1), (0)
    | (1), (1), (1), (1)
    | (1), (1), (1), (2)
    | (1), (1), (2), (0)
    | (1), (1), (2), (1)
    | (1), (1), (2), (2)
    | (1), (2), (0), (0)
    | (1), (2), (0), (1)
    | (1), (2), (0), (2)
    | (1), (2), (1), (0)
    | (1), (2), (1), (1)
    | (1), (2), (1), (2)
    | (1), (2), (2), (0)
    | (1), (2), (2), (1)
    | (1), (2), (2), (2)
    | (2), (0), (0), (0)
    | (2), (0), (0), (1)
    | (2), (0), (0), (2)
    | (2), (0), (1), (0)
    | (2), (0), (1), (1)
    | (2), (0), (1), (2)
    | (2), (0), (2), (0)
    | (2), (0), (2), (1)
    | (2), (0), (2), (2)
    | (2), (1), (0), (0)
    | (2), (1), (0), (1)
    | (2), (1), (0), (2)
    | (2), (1), (1), (0)
    | (2), (1), (1), (1)
    | (2), (1), (1), (2)
    | (2), (1), (2), (0)
    | (2), (1), (2), (1)
    | (2), (1), (2), (2)
    | (2), (2), (0), (0)
    | (2), (2), (0), (1)
    | (2), (2), (0), (2)
    | (2), (2), (1), (0)
    | (2), (2), (1), (1)
    | (2), (2), (1), (2)
    | (2), (2), (2), (0)
    | (2), (2), (2), (1)
    | (2), (2), (2), (2) => simp[Digit.half_add3, add'_add''_one_zero_eq_one, add'_add''_one_one_eq_two]
  }
}

theorem add''_add'_carry_comm(x y:Digits)(c d:Digit):add'' (add' x y c) d = add'' (add' x y d) c:=by{
  match x, y with
  | _, ε => simp; exact add''.carry_comm _ _ _
  | ε, y'::yd => {
    match c, d with
    | (0), (0)
    | (1), (1)
    | (2), (2) => simp
    | (0), (1)
    | (0), (2)
    | (1), (0)
    | (2), (0) => {
      simp[add'',add']
      simp[Digit.half_add3.add_zero_zero]
    }
    | (1), (2)
    | (2), (1) => {
      simp[add'',add']
      match yd with
      | (0) | (1) | (2) => simp[Digit.half_add3]
    }
  }
  | x'::xd, y'::yd => {
    simp[add'', add']
    match xd, yd, c, d with
    | (0), (0), (0), (0)
    | (0), (0), (0), (1)
    | (0), (0), (0), (2)
    | (0), (0), (1), (0)
    | (0), (0), (1), (1)
    | (0), (0), (1), (2)
    | (0), (0), (2), (0)
    | (0), (0), (2), (1)
    | (0), (0), (2), (2)
    | (0), (1), (0), (0)
    | (0), (1), (0), (1)
    | (0), (1), (0), (2)
    | (0), (1), (1), (0)
    | (0), (1), (1), (1)
    | (0), (1), (1), (2)
    | (0), (1), (2), (0)
    | (0), (1), (2), (1)
    | (0), (1), (2), (2)
    | (0), (2), (0), (0)
    | (0), (2), (0), (1)
    | (0), (2), (0), (2)
    | (0), (2), (1), (0)
    | (0), (2), (1), (1)
    | (0), (2), (1), (2)
    | (0), (2), (2), (0)
    | (0), (2), (2), (1)
    | (0), (2), (2), (2)
    | (1), (0), (0), (0)
    | (1), (0), (0), (1)
    | (1), (0), (0), (2)
    | (1), (0), (1), (0)
    | (1), (0), (1), (1)
    | (1), (0), (1), (2)
    | (1), (0), (2), (0)
    | (1), (0), (2), (1)
    | (1), (0), (2), (2)
    | (1), (1), (0), (0)
    | (1), (1), (0), (1)
    | (1), (1), (0), (2)
    | (1), (1), (1), (0)
    | (1), (1), (1), (1)
    | (1), (1), (1), (2)
    | (1), (1), (2), (0)
    | (1), (1), (2), (1)
    | (1), (1), (2), (2)
    | (1), (2), (0), (0)
    | (1), (2), (0), (1)
    | (1), (2), (0), (2)
    | (1), (2), (1), (0)
    | (1), (2), (1), (1)
    | (1), (2), (1), (2)
    | (1), (2), (2), (0)
    | (1), (2), (2), (1)
    | (1), (2), (2), (2)
    | (2), (0), (0), (0)
    | (2), (0), (0), (1)
    | (2), (0), (0), (2)
    | (2), (0), (1), (0)
    | (2), (0), (1), (1)
    | (2), (0), (1), (2)
    | (2), (0), (2), (0)
    | (2), (0), (2), (1)
    | (2), (0), (2), (2)
    | (2), (1), (0), (0)
    | (2), (1), (0), (1)
    | (2), (1), (0), (2)
    | (2), (1), (1), (0)
    | (2), (1), (1), (1)
    | (2), (1), (1), (2)
    | (2), (1), (2), (0)
    | (2), (1), (2), (1)
    | (2), (1), (2), (2)
    | (2), (2), (0), (0)
    | (2), (2), (0), (1)
    | (2), (2), (0), (2)
    | (2), (2), (1), (0)
    | (2), (2), (1), (1)
    | (2), (2), (1), (2)
    | (2), (2), (2), (0)
    | (2), (2), (2), (1)
    | (2), (2), (2), (2) => simp[Digit.half_add3, add''_add'_zero_one_eq_one, add''_add'_one_one_eq_two]
  }
}

theorem add'.one_zero_eq_zero_one(x y z:Digits):add' (add' x y (1)) z (0) = add' (add' x y (0)) z (1):=by{
  match x, y, z with
  | _, _, ε => simp; exact (add''_add'_zero_one_eq_one _ _).symm
  | _, ε, _::_
  | ε, _::_, _::_ => simp; exact add'_add''_one_zero_eq_one _ _
  | _::xd, _::yd, _::zd => {
    simp[add']
    match xd, yd, zd with
    | (0), (0), (0)
    | (0), (0), (1)
    | (0), (0), (2)
    | (0), (1), (0)
    | (0), (1), (1)
    | (0), (1), (2)
    | (0), (2), (0)
    | (0), (2), (1)
    | (0), (2), (2)
    | (1), (0), (0)
    | (1), (0), (1)
    | (1), (0), (2)
    | (1), (1), (0)
    | (1), (1), (1)
    | (1), (1), (2)
    | (1), (2), (0)
    | (1), (2), (1)
    | (1), (2), (2)
    | (2), (0), (0)
    | (2), (0), (1)
    | (2), (0), (2)
    | (2), (1), (0)
    | (2), (1), (1)
    | (2), (1), (2)
    | (2), (2), (0)
    | (2), (2), (1)
    | (2), (2), (2) => simp[Digit.half_add3, one_zero_eq_zero_one]
  }
}

theorem add'.one_zero_eq_zero_one'(x y z:Digits):add' x (add' y z (1)) (0) = add' x (add' y z (0)) (1):=by{
  repeat rw[comm x]
  exact one_zero_eq_zero_one _ _ _
}

theorem add'.one_one_eq_zero_two(x y z:Digits):add' (add' x y (1)) z (1) = add' (add' x y (0)) z (2):=by{
  match x, y, z with
  | _, _, ε => simp; rw[add''_add'_carry_comm _ _ (0)]; simp; exact add''_add'_one_one_eq_two _ _
  | _, ε, _::_
  | ε, _::_, _::_ => simp; exact add'_add''_one_one_eq_two _ _
  | _::xd, _::yd, _::zd => {
    simp[add']
    match xd, yd, zd with
    | (0), (0), (0)
    | (0), (0), (1)
    | (0), (0), (2)
    | (0), (1), (0)
    | (0), (1), (1)
    | (0), (1), (2)
    | (0), (2), (0)
    | (0), (2), (1)
    | (0), (2), (2)
    | (1), (0), (0)
    | (1), (0), (1)
    | (1), (0), (2)
    | (1), (1), (0)
    | (1), (1), (1)
    | (1), (1), (2)
    | (1), (2), (0)
    | (1), (2), (1)
    | (1), (2), (2)
    | (2), (0), (0)
    | (2), (0), (1)
    | (2), (0), (2)
    | (2), (1), (0)
    | (2), (1), (1)
    | (2), (1), (2)
    | (2), (2), (0)
    | (2), (2), (1)
    | (2), (2), (2) => simp[Digit.half_add3, one_zero_eq_zero_one, one_one_eq_zero_two]
  }
}

theorem add'.one_one_eq_zero_two'(x y z:Digits):add' x (add' y z (1)) (1) = add' x (add' y z (0)) (2):=by{
  repeat rw[comm x]
  exact one_one_eq_zero_two _ _ _
}

theorem add'.one_one_eq_two_zero(x y z:Digits):add' (add' x y (1)) z (1) = add' (add' x y (2)) z (0):=by{
  match x, y, z with
  | _, _, ε => simp; exact add''_add'_one_one_eq_two _ _
  | _, ε, _::_
  | ε, _::_, _::_ => simp; rw[add'_add''_carry_comm _ _ (2)]; simp; exact add'_add''_one_one_eq_two _ _
  | _::xd, _::yd, _::zd => {
    simp[add']
    match xd, yd, zd with
    | (0), (0), (0)
    | (0), (0), (1)
    | (0), (0), (2)
    | (0), (1), (0)
    | (0), (1), (1)
    | (0), (1), (2)
    | (0), (2), (0)
    | (0), (2), (1)
    | (0), (2), (2)
    | (1), (0), (0)
    | (1), (0), (1)
    | (1), (0), (2)
    | (1), (1), (0)
    | (1), (1), (1)
    | (1), (1), (2)
    | (1), (2), (0)
    | (1), (2), (1)
    | (1), (2), (2)
    | (2), (0), (0)
    | (2), (0), (1)
    | (2), (0), (2)
    | (2), (1), (0)
    | (2), (1), (1)
    | (2), (1), (2)
    | (2), (2), (0)
    | (2), (2), (1)
    | (2), (2), (2) => simp[Digit.half_add3, one_zero_eq_zero_one, one_one_eq_two_zero]
  }
}

theorem add'.one_one_eq_two_zero'(x y z:Digits):add' x (add' y z (1)) (1) = add' x (add' y z (2)) (0):=by{
  repeat rw[comm x]
  exact one_one_eq_two_zero _ _ _
}

theorem add'.two_zero_eq_zero_two(x y z:Digits):add' (add' x y (2)) z (0) = add' (add' x y (0)) z (2):=
  (one_one_eq_two_zero _ _ _).symm.trans (one_one_eq_zero_two _ _ _)

theorem add'.two_zero_eq_zero_two'(x y z:Digits):add' x (add' y z (2)) (0) = add' x (add' y z (0)) (2):=
  (comm _ _ _).trans ((two_zero_eq_zero_two _ _ _).trans (comm _ _ _))

theorem add'.two_one_eq_one_two(x y z:Digits):add' (add' x y (2)) z (1) = add' (add' x y (1)) z (2):=by{
  match x, y, z with
  | _, _, ε => simp; exact add''_add'_carry_comm _ _ _ _
  | _, ε, _::_
  | ε, _::_, _::_ => simp; exact add'_add''_carry_comm _ _ _ _
  | _::xd, _::yd, _::zd => {
    simp[add']
    match xd, yd, zd with
    | (0), (0), (0)
    | (0), (0), (1)
    | (0), (0), (2)
    | (0), (1), (0)
    | (0), (1), (1)
    | (0), (1), (2)
    | (0), (2), (0)
    | (0), (2), (1)
    | (0), (2), (2)
    | (1), (0), (0)
    | (1), (0), (1)
    | (1), (0), (2)
    | (1), (1), (0)
    | (1), (1), (1)
    | (1), (1), (2)
    | (1), (2), (0)
    | (1), (2), (1)
    | (1), (2), (2)
    | (2), (0), (0)
    | (2), (0), (1)
    | (2), (0), (2)
    | (2), (1), (0)
    | (2), (1), (1)
    | (2), (1), (2)
    | (2), (2), (0)
    | (2), (2), (1)
    | (2), (2), (2) => simp[Digit.half_add3, one_zero_eq_zero_one, one_one_eq_zero_two, two_zero_eq_zero_two, two_one_eq_one_two]
  }
}

theorem add'.two_one_eq_one_two'(x y z:Digits):add' x (add' y z (2)) (1) = add' x (add' y z (1)) (2):=by{
  repeat rw[comm x]
  exact two_one_eq_one_two _ _ _
}

theorem add'.carry_comm(x y z:Digits)(c d:Digit):add' (add' x y c) z d=(add' (add' x y d) z c):=by{
  match x, y, z with
  | _, _, ε => simp; exact add''_add'_carry_comm _ _ _ _
  | _, ε, _::_
  | ε, _::_, _::_ => simp; exact add'_add''_carry_comm _ _ _ _
  | _::xd, _::yd, _::zd => {
    simp[add']
    match xd, yd, zd, c, d with
    | (0), (0), (0), (0), (0)
    | (0), (0), (0), (0), (1)
    | (0), (0), (0), (0), (2)
    | (0), (0), (0), (1), (0)
    | (0), (0), (0), (1), (1)
    | (0), (0), (0), (1), (2)
    | (0), (0), (0), (2), (0)
    | (0), (0), (0), (2), (1)
    | (0), (0), (0), (2), (2)
    | (0), (0), (1), (0), (0)
    | (0), (0), (1), (0), (1)
    | (0), (0), (1), (0), (2)
    | (0), (0), (1), (1), (0)
    | (0), (0), (1), (1), (1)
    | (0), (0), (1), (1), (2)
    | (0), (0), (1), (2), (0)
    | (0), (0), (1), (2), (1)
    | (0), (0), (1), (2), (2)
    | (0), (0), (2), (0), (0)
    | (0), (0), (2), (0), (1)
    | (0), (0), (2), (0), (2)
    | (0), (0), (2), (1), (0)
    | (0), (0), (2), (1), (1)
    | (0), (0), (2), (1), (2)
    | (0), (0), (2), (2), (0)
    | (0), (0), (2), (2), (1)
    | (0), (0), (2), (2), (2)
    | (0), (1), (0), (0), (0)
    | (0), (1), (0), (0), (1)
    | (0), (1), (0), (0), (2)
    | (0), (1), (0), (1), (0)
    | (0), (1), (0), (1), (1)
    | (0), (1), (0), (1), (2)
    | (0), (1), (0), (2), (0)
    | (0), (1), (0), (2), (1)
    | (0), (1), (0), (2), (2)
    | (0), (1), (1), (0), (0)
    | (0), (1), (1), (0), (1)
    | (0), (1), (1), (0), (2)
    | (0), (1), (1), (1), (0)
    | (0), (1), (1), (1), (1)
    | (0), (1), (1), (1), (2)
    | (0), (1), (1), (2), (0)
    | (0), (1), (1), (2), (1)
    | (0), (1), (1), (2), (2)
    | (0), (1), (2), (0), (0)
    | (0), (1), (2), (0), (1)
    | (0), (1), (2), (0), (2)
    | (0), (1), (2), (1), (0)
    | (0), (1), (2), (1), (1)
    | (0), (1), (2), (1), (2)
    | (0), (1), (2), (2), (0)
    | (0), (1), (2), (2), (1)
    | (0), (1), (2), (2), (2)
    | (0), (2), (0), (0), (0)
    | (0), (2), (0), (0), (1)
    | (0), (2), (0), (0), (2)
    | (0), (2), (0), (1), (0)
    | (0), (2), (0), (1), (1)
    | (0), (2), (0), (1), (2)
    | (0), (2), (0), (2), (0)
    | (0), (2), (0), (2), (1)
    | (0), (2), (0), (2), (2)
    | (0), (2), (1), (0), (0)
    | (0), (2), (1), (0), (1)
    | (0), (2), (1), (0), (2)
    | (0), (2), (1), (1), (0)
    | (0), (2), (1), (1), (1)
    | (0), (2), (1), (1), (2)
    | (0), (2), (1), (2), (0)
    | (0), (2), (1), (2), (1)
    | (0), (2), (1), (2), (2)
    | (0), (2), (2), (0), (0)
    | (0), (2), (2), (0), (1)
    | (0), (2), (2), (0), (2)
    | (0), (2), (2), (1), (0)
    | (0), (2), (2), (1), (1)
    | (0), (2), (2), (1), (2)
    | (0), (2), (2), (2), (0)
    | (0), (2), (2), (2), (1)
    | (0), (2), (2), (2), (2)
    | (1), (0), (0), (0), (0)
    | (1), (0), (0), (0), (1)
    | (1), (0), (0), (0), (2)
    | (1), (0), (0), (1), (0)
    | (1), (0), (0), (1), (1)
    | (1), (0), (0), (1), (2)
    | (1), (0), (0), (2), (0)
    | (1), (0), (0), (2), (1)
    | (1), (0), (0), (2), (2)
    | (1), (0), (1), (0), (0)
    | (1), (0), (1), (0), (1)
    | (1), (0), (1), (0), (2)
    | (1), (0), (1), (1), (0)
    | (1), (0), (1), (1), (1)
    | (1), (0), (1), (1), (2)
    | (1), (0), (1), (2), (0)
    | (1), (0), (1), (2), (1)
    | (1), (0), (1), (2), (2)
    | (1), (0), (2), (0), (0)
    | (1), (0), (2), (0), (1)
    | (1), (0), (2), (0), (2)
    | (1), (0), (2), (1), (0)
    | (1), (0), (2), (1), (1)
    | (1), (0), (2), (1), (2)
    | (1), (0), (2), (2), (0)
    | (1), (0), (2), (2), (1)
    | (1), (0), (2), (2), (2)
    | (1), (1), (0), (0), (0)
    | (1), (1), (0), (0), (1)
    | (1), (1), (0), (0), (2)
    | (1), (1), (0), (1), (0)
    | (1), (1), (0), (1), (1)
    | (1), (1), (0), (1), (2)
    | (1), (1), (0), (2), (0)
    | (1), (1), (0), (2), (1)
    | (1), (1), (0), (2), (2)
    | (1), (1), (1), (0), (0)
    | (1), (1), (1), (0), (1)
    | (1), (1), (1), (0), (2)
    | (1), (1), (1), (1), (0)
    | (1), (1), (1), (1), (1)
    | (1), (1), (1), (1), (2)
    | (1), (1), (1), (2), (0)
    | (1), (1), (1), (2), (1)
    | (1), (1), (1), (2), (2)
    | (1), (1), (2), (0), (0)
    | (1), (1), (2), (0), (1)
    | (1), (1), (2), (0), (2)
    | (1), (1), (2), (1), (0)
    | (1), (1), (2), (1), (1)
    | (1), (1), (2), (1), (2)
    | (1), (1), (2), (2), (0)
    | (1), (1), (2), (2), (1)
    | (1), (1), (2), (2), (2)
    | (1), (2), (0), (0), (0)
    | (1), (2), (0), (0), (1)
    | (1), (2), (0), (0), (2)
    | (1), (2), (0), (1), (0)
    | (1), (2), (0), (1), (1)
    | (1), (2), (0), (1), (2)
    | (1), (2), (0), (2), (0)
    | (1), (2), (0), (2), (1)
    | (1), (2), (0), (2), (2)
    | (1), (2), (1), (0), (0)
    | (1), (2), (1), (0), (1)
    | (1), (2), (1), (0), (2)
    | (1), (2), (1), (1), (0)
    | (1), (2), (1), (1), (1)
    | (1), (2), (1), (1), (2)
    | (1), (2), (1), (2), (0)
    | (1), (2), (1), (2), (1)
    | (1), (2), (1), (2), (2)
    | (1), (2), (2), (0), (0)
    | (1), (2), (2), (0), (1)
    | (1), (2), (2), (0), (2)
    | (1), (2), (2), (1), (0)
    | (1), (2), (2), (1), (1)
    | (1), (2), (2), (1), (2)
    | (1), (2), (2), (2), (0)
    | (1), (2), (2), (2), (1)
    | (1), (2), (2), (2), (2)
    | (2), (0), (0), (0), (0)
    | (2), (0), (0), (0), (1)
    | (2), (0), (0), (0), (2)
    | (2), (0), (0), (1), (0)
    | (2), (0), (0), (1), (1)
    | (2), (0), (0), (1), (2)
    | (2), (0), (0), (2), (0)
    | (2), (0), (0), (2), (1)
    | (2), (0), (0), (2), (2)
    | (2), (0), (1), (0), (0)
    | (2), (0), (1), (0), (1)
    | (2), (0), (1), (0), (2)
    | (2), (0), (1), (1), (0)
    | (2), (0), (1), (1), (1)
    | (2), (0), (1), (1), (2)
    | (2), (0), (1), (2), (0)
    | (2), (0), (1), (2), (1)
    | (2), (0), (1), (2), (2)
    | (2), (0), (2), (0), (0)
    | (2), (0), (2), (0), (1)
    | (2), (0), (2), (0), (2)
    | (2), (0), (2), (1), (0)
    | (2), (0), (2), (1), (1)
    | (2), (0), (2), (1), (2)
    | (2), (0), (2), (2), (0)
    | (2), (0), (2), (2), (1)
    | (2), (0), (2), (2), (2)
    | (2), (1), (0), (0), (0)
    | (2), (1), (0), (0), (1)
    | (2), (1), (0), (0), (2)
    | (2), (1), (0), (1), (0)
    | (2), (1), (0), (1), (1)
    | (2), (1), (0), (1), (2)
    | (2), (1), (0), (2), (0)
    | (2), (1), (0), (2), (1)
    | (2), (1), (0), (2), (2)
    | (2), (1), (1), (0), (0)
    | (2), (1), (1), (0), (1)
    | (2), (1), (1), (0), (2)
    | (2), (1), (1), (1), (0)
    | (2), (1), (1), (1), (1)
    | (2), (1), (1), (1), (2)
    | (2), (1), (1), (2), (0)
    | (2), (1), (1), (2), (1)
    | (2), (1), (1), (2), (2)
    | (2), (1), (2), (0), (0)
    | (2), (1), (2), (0), (1)
    | (2), (1), (2), (0), (2)
    | (2), (1), (2), (1), (0)
    | (2), (1), (2), (1), (1)
    | (2), (1), (2), (1), (2)
    | (2), (1), (2), (2), (0)
    | (2), (1), (2), (2), (1)
    | (2), (1), (2), (2), (2)
    | (2), (2), (0), (0), (0)
    | (2), (2), (0), (0), (1)
    | (2), (2), (0), (0), (2)
    | (2), (2), (0), (1), (0)
    | (2), (2), (0), (1), (1)
    | (2), (2), (0), (1), (2)
    | (2), (2), (0), (2), (0)
    | (2), (2), (0), (2), (1)
    | (2), (2), (0), (2), (2)
    | (2), (2), (1), (0), (0)
    | (2), (2), (1), (0), (1)
    | (2), (2), (1), (0), (2)
    | (2), (2), (1), (1), (0)
    | (2), (2), (1), (1), (1)
    | (2), (2), (1), (1), (2)
    | (2), (2), (1), (2), (0)
    | (2), (2), (1), (2), (1)
    | (2), (2), (1), (2), (2)
    | (2), (2), (2), (0), (0)
    | (2), (2), (2), (0), (1)
    | (2), (2), (2), (0), (2)
    | (2), (2), (2), (1), (0)
    | (2), (2), (2), (1), (1)
    | (2), (2), (2), (1), (2)
    | (2), (2), (2), (2), (0)
    | (2), (2), (2), (2), (1)
    | (2), (2), (2), (2), (2) => simp[Digit.half_add3, one_zero_eq_zero_one, one_one_eq_zero_two, two_zero_eq_zero_two, two_one_eq_one_two]
  }
}

theorem add'_add''_eq_add''_add'(x y:Digits)(c d:Digit):add' (x.add'' c) y d = add'' (add' x y c) d:=by{
  match x, y with
  | _, ε => simp
  | ε, _::yd => {
    simp
    match yd, c, d with
    | (0), (0), (0)
    | (0), (0), (1)
    | (0), (0), (2)
    | (0), (1), (0)
    | (0), (1), (1)
    | (0), (1), (2)
    | (0), (2), (0)
    | (0), (2), (1)
    | (0), (2), (2)
    | (1), (0), (0)
    | (1), (0), (1)
    | (1), (0), (2)
    | (1), (1), (0)
    | (1), (1), (1)
    | (1), (1), (2)
    | (1), (2), (0)
    | (1), (2), (1)
    | (1), (2), (2)
    | (2), (0), (0)
    | (2), (0), (1)
    | (2), (0), (2)
    | (2), (1), (0)
    | (2), (1), (1)
    | (2), (1), (2)
    | (2), (2), (0)
    | (2), (2), (1)
    | (2), (2), (2) => simp[add',add'',Digit.half_add3,add''.one_one_eq_two]
  }
  | x'::xd, y'::yd => {
    match xd, yd, c, d with
    | (0), (0), (0), (0)
    | (0), (0), (0), (1)
    | (0), (0), (0), (2)
    | (0), (0), (1), (0)
    | (0), (0), (1), (1)
    | (0), (0), (1), (2)
    | (0), (0), (2), (0)
    | (0), (0), (2), (1)
    | (0), (0), (2), (2)
    | (0), (1), (0), (0)
    | (0), (1), (0), (1)
    | (0), (1), (0), (2)
    | (0), (1), (1), (0)
    | (0), (1), (1), (1)
    | (0), (1), (1), (2)
    | (0), (1), (2), (0)
    | (0), (1), (2), (1)
    | (0), (1), (2), (2)
    | (0), (2), (0), (0)
    | (0), (2), (0), (1)
    | (0), (2), (0), (2)
    | (0), (2), (1), (0)
    | (0), (2), (1), (1)
    | (0), (2), (1), (2)
    | (0), (2), (2), (0)
    | (0), (2), (2), (1)
    | (0), (2), (2), (2)
    | (1), (0), (0), (0)
    | (1), (0), (0), (1)
    | (1), (0), (0), (2)
    | (1), (0), (1), (0)
    | (1), (0), (1), (1)
    | (1), (0), (1), (2)
    | (1), (0), (2), (0)
    | (1), (0), (2), (1)
    | (1), (0), (2), (2)
    | (1), (1), (0), (0)
    | (1), (1), (0), (1)
    | (1), (1), (0), (2)
    | (1), (1), (1), (0)
    | (1), (1), (1), (1)
    | (1), (1), (1), (2)
    | (1), (1), (2), (0)
    | (1), (1), (2), (1)
    | (1), (1), (2), (2)
    | (1), (2), (0), (0)
    | (1), (2), (0), (1)
    | (1), (2), (0), (2)
    | (1), (2), (1), (0)
    | (1), (2), (1), (1)
    | (1), (2), (1), (2)
    | (1), (2), (2), (0)
    | (1), (2), (2), (1)
    | (1), (2), (2), (2)
    | (2), (0), (0), (0)
    | (2), (0), (0), (1)
    | (2), (0), (0), (2)
    | (2), (0), (1), (0)
    | (2), (0), (1), (1)
    | (2), (0), (1), (2)
    | (2), (0), (2), (0)
    | (2), (0), (2), (1)
    | (2), (0), (2), (2)
    | (2), (1), (0), (0)
    | (2), (1), (0), (1)
    | (2), (1), (0), (2)
    | (2), (1), (1), (0)
    | (2), (1), (1), (1)
    | (2), (1), (1), (2)
    | (2), (1), (2), (0)
    | (2), (1), (2), (1)
    | (2), (1), (2), (2)
    | (2), (2), (0), (0)
    | (2), (2), (0), (1)
    | (2), (2), (0), (2)
    | (2), (2), (1), (0)
    | (2), (2), (1), (1)
    | (2), (2), (1), (2)
    | (2), (2), (2), (0)
    | (2), (2), (2), (1)
    | (2), (2), (2), (2) => simp[add',add'',Digit.half_add3, add''_add'_zero_one_eq_one, add'_add''_one_zero_eq_one,add''_add'_one_one_eq_two,add'_add''_one_one_eq_two]
  }
}

theorem add'_add''_assoc_comm(x y:Digits)(c d:Digit):add' (x.add'' c) y d = add' (y.add'' c) x d:=by{
  match x, y with
  | ε, ε => simp
  | ε, _::yd => {
    match yd, c, d with
    | (0), (0), (0)
    | (0), (0), (1)
    | (0), (0), (2)
    | (0), (1), (0)
    | (0), (1), (1)
    | (0), (1), (2)
    | (0), (2), (0)
    | (0), (2), (1)
    | (0), (2), (2)
    | (1), (0), (0)
    | (1), (0), (1)
    | (1), (0), (2)
    | (1), (1), (0)
    | (1), (1), (1)
    | (1), (1), (2)
    | (1), (2), (0)
    | (1), (2), (1)
    | (1), (2), (2)
    | (2), (0), (0)
    | (2), (0), (1)
    | (2), (0), (2)
    | (2), (1), (0)
    | (2), (1), (1)
    | (2), (1), (2)
    | (2), (2), (0)
    | (2), (2), (1)
    | (2), (2), (2) => simp[add',add'', Digit.half_add3, add''.one_one_eq_two]
  }
  | _::xd, ε => {
    match xd, c, d with
    | (0), (0), (0)
    | (0), (0), (1)
    | (0), (0), (2)
    | (0), (1), (0)
    | (0), (1), (1)
    | (0), (1), (2)
    | (0), (2), (0)
    | (0), (2), (1)
    | (0), (2), (2)
    | (1), (0), (0)
    | (1), (0), (1)
    | (1), (0), (2)
    | (1), (1), (0)
    | (1), (1), (1)
    | (1), (1), (2)
    | (1), (2), (0)
    | (1), (2), (1)
    | (1), (2), (2)
    | (2), (0), (0)
    | (2), (0), (1)
    | (2), (0), (2)
    | (2), (1), (0)
    | (2), (1), (1)
    | (2), (1), (2)
    | (2), (2), (0)
    | (2), (2), (1)
    | (2), (2), (2) => simp[add',add'', Digit.half_add3, add''.one_one_eq_two]
  }
  | x'::xd, y'::yd => {
    match xd, yd, c, d with
    | (0), (0), (0), (0)
    | (0), (0), (0), (1)
    | (0), (0), (0), (2)
    | (0), (0), (1), (0)
    | (0), (0), (1), (1)
    | (0), (0), (1), (2)
    | (0), (0), (2), (0)
    | (0), (0), (2), (1)
    | (0), (0), (2), (2)
    | (0), (1), (0), (0)
    | (0), (1), (0), (1)
    | (0), (1), (0), (2)
    | (0), (1), (1), (0)
    | (0), (1), (1), (1)
    | (0), (1), (1), (2)
    | (0), (1), (2), (0)
    | (0), (1), (2), (1)
    | (0), (1), (2), (2)
    | (0), (2), (0), (0)
    | (0), (2), (0), (1)
    | (0), (2), (0), (2)
    | (0), (2), (1), (0)
    | (0), (2), (1), (1)
    | (0), (2), (1), (2)
    | (0), (2), (2), (0)
    | (0), (2), (2), (1)
    | (0), (2), (2), (2)
    | (1), (0), (0), (0)
    | (1), (0), (0), (1)
    | (1), (0), (0), (2)
    | (1), (0), (1), (0)
    | (1), (0), (1), (1)
    | (1), (0), (1), (2)
    | (1), (0), (2), (0)
    | (1), (0), (2), (1)
    | (1), (0), (2), (2)
    | (1), (1), (0), (0)
    | (1), (1), (0), (1)
    | (1), (1), (0), (2)
    | (1), (1), (1), (0)
    | (1), (1), (1), (1)
    | (1), (1), (1), (2)
    | (1), (1), (2), (0)
    | (1), (1), (2), (1)
    | (1), (1), (2), (2)
    | (1), (2), (0), (0)
    | (1), (2), (0), (1)
    | (1), (2), (0), (2)
    | (1), (2), (1), (0)
    | (1), (2), (1), (1)
    | (1), (2), (1), (2)
    | (1), (2), (2), (0)
    | (1), (2), (2), (1)
    | (1), (2), (2), (2)
    | (2), (0), (0), (0)
    | (2), (0), (0), (1)
    | (2), (0), (0), (2)
    | (2), (0), (1), (0)
    | (2), (0), (1), (1)
    | (2), (0), (1), (2)
    | (2), (0), (2), (0)
    | (2), (0), (2), (1)
    | (2), (0), (2), (2)
    | (2), (1), (0), (0)
    | (2), (1), (0), (1)
    | (2), (1), (0), (2)
    | (2), (1), (1), (0)
    | (2), (1), (1), (1)
    | (2), (1), (1), (2)
    | (2), (1), (2), (0)
    | (2), (1), (2), (1)
    | (2), (1), (2), (2)
    | (2), (2), (0), (0)
    | (2), (2), (0), (1)
    | (2), (2), (0), (2)
    | (2), (2), (1), (0)
    | (2), (2), (1), (1)
    | (2), (2), (1), (2)
    | (2), (2), (2), (0)
    | (2), (2), (2), (1)
    | (2), (2), (2), (2) => simp[add',add'',Digit.half_add3, add'.comm x' y' _, add'_add''_one_zero_eq_one,add'_add''_one_one_eq_two]
  }
}

theorem add'.assoc(x y z:Digits)(c d:Digit):add' (add' x y c) z d = add' x (add' y z c) d:=by{
  match x, y, z with
  | _, _, ε =>{
    simp
    rw[add'.comm]
    apply Eq.symm
    rw[add'.comm]
    exact add'_add''_eq_add''_add' _ _ _ _
  }
  | _, ε, _::_ => {
    simp
    rw[add'_add''_assoc_comm]
    exact comm _ _ _
  }
  | ε, _::_, _::_ => {
    simp
    rw[add'_add''_eq_add''_add']
  }
  | _::xd, _::yd, _::zd => {
    match xd, yd, zd, c, d with
    | (0), (0), (0), (0), (0)
    | (0), (0), (0), (0), (1)
    | (0), (0), (0), (0), (2)
    | (0), (0), (0), (1), (0)
    | (0), (0), (0), (1), (1)
    | (0), (0), (0), (1), (2)
    | (0), (0), (0), (2), (0)
    | (0), (0), (0), (2), (1)
    | (0), (0), (0), (2), (2)
    | (0), (0), (1), (0), (0)
    | (0), (0), (1), (0), (1)
    | (0), (0), (1), (0), (2)
    | (0), (0), (1), (1), (0)
    | (0), (0), (1), (1), (1)
    | (0), (0), (1), (1), (2)
    | (0), (0), (1), (2), (0)
    | (0), (0), (1), (2), (1)
    | (0), (0), (1), (2), (2)
    | (0), (0), (2), (0), (0)
    | (0), (0), (2), (0), (1)
    | (0), (0), (2), (0), (2)
    | (0), (0), (2), (1), (0)
    | (0), (0), (2), (1), (1)
    | (0), (0), (2), (1), (2)
    | (0), (0), (2), (2), (0)
    | (0), (0), (2), (2), (1)
    | (0), (0), (2), (2), (2)
    | (0), (1), (0), (0), (0)
    | (0), (1), (0), (0), (1)
    | (0), (1), (0), (0), (2)
    | (0), (1), (0), (1), (0)
    | (0), (1), (0), (1), (1)
    | (0), (1), (0), (1), (2)
    | (0), (1), (0), (2), (0)
    | (0), (1), (0), (2), (1)
    | (0), (1), (0), (2), (2)
    | (0), (1), (1), (0), (0)
    | (0), (1), (1), (0), (1)
    | (0), (1), (1), (0), (2)
    | (0), (1), (1), (1), (0)
    | (0), (1), (1), (1), (1)
    | (0), (1), (1), (1), (2)
    | (0), (1), (1), (2), (0)
    | (0), (1), (1), (2), (1)
    | (0), (1), (1), (2), (2)
    | (0), (1), (2), (0), (0)
    | (0), (1), (2), (0), (1)
    | (0), (1), (2), (0), (2)
    | (0), (1), (2), (1), (0)
    | (0), (1), (2), (1), (1)
    | (0), (1), (2), (1), (2)
    | (0), (1), (2), (2), (0)
    | (0), (1), (2), (2), (1)
    | (0), (1), (2), (2), (2)
    | (0), (2), (0), (0), (0)
    | (0), (2), (0), (0), (1)
    | (0), (2), (0), (0), (2)
    | (0), (2), (0), (1), (0)
    | (0), (2), (0), (1), (1)
    | (0), (2), (0), (1), (2)
    | (0), (2), (0), (2), (0)
    | (0), (2), (0), (2), (1)
    | (0), (2), (0), (2), (2)
    | (0), (2), (1), (0), (0)
    | (0), (2), (1), (0), (1)
    | (0), (2), (1), (0), (2)
    | (0), (2), (1), (1), (0)
    | (0), (2), (1), (1), (1)
    | (0), (2), (1), (1), (2)
    | (0), (2), (1), (2), (0)
    | (0), (2), (1), (2), (1)
    | (0), (2), (1), (2), (2)
    | (0), (2), (2), (0), (0)
    | (0), (2), (2), (0), (1)
    | (0), (2), (2), (0), (2)
    | (0), (2), (2), (1), (0)
    | (0), (2), (2), (1), (1)
    | (0), (2), (2), (1), (2)
    | (0), (2), (2), (2), (0)
    | (0), (2), (2), (2), (1)
    | (0), (2), (2), (2), (2)
    | (1), (0), (0), (0), (0)
    | (1), (0), (0), (0), (1)
    | (1), (0), (0), (0), (2)
    | (1), (0), (0), (1), (0)
    | (1), (0), (0), (1), (1)
    | (1), (0), (0), (1), (2)
    | (1), (0), (0), (2), (0)
    | (1), (0), (0), (2), (1)
    | (1), (0), (0), (2), (2)
    | (1), (0), (1), (0), (0)
    | (1), (0), (1), (0), (1)
    | (1), (0), (1), (0), (2)
    | (1), (0), (1), (1), (0)
    | (1), (0), (1), (1), (1)
    | (1), (0), (1), (1), (2)
    | (1), (0), (1), (2), (0)
    | (1), (0), (1), (2), (1)
    | (1), (0), (1), (2), (2)
    | (1), (0), (2), (0), (0)
    | (1), (0), (2), (0), (1)
    | (1), (0), (2), (0), (2)
    | (1), (0), (2), (1), (0)
    | (1), (0), (2), (1), (1)
    | (1), (0), (2), (1), (2)
    | (1), (0), (2), (2), (0)
    | (1), (0), (2), (2), (1)
    | (1), (0), (2), (2), (2)
    | (1), (1), (0), (0), (0)
    | (1), (1), (0), (0), (1)
    | (1), (1), (0), (0), (2)
    | (1), (1), (0), (1), (0)
    | (1), (1), (0), (1), (1)
    | (1), (1), (0), (1), (2)
    | (1), (1), (0), (2), (0)
    | (1), (1), (0), (2), (1)
    | (1), (1), (0), (2), (2)
    | (1), (1), (1), (0), (0)
    | (1), (1), (1), (0), (1)
    | (1), (1), (1), (0), (2)
    | (1), (1), (1), (1), (0)
    | (1), (1), (1), (1), (1)
    | (1), (1), (1), (1), (2)
    | (1), (1), (1), (2), (0)
    | (1), (1), (1), (2), (1)
    | (1), (1), (1), (2), (2)
    | (1), (1), (2), (0), (0)
    | (1), (1), (2), (0), (1)
    | (1), (1), (2), (0), (2)
    | (1), (1), (2), (1), (0)
    | (1), (1), (2), (1), (1)
    | (1), (1), (2), (1), (2)
    | (1), (1), (2), (2), (0)
    | (1), (1), (2), (2), (1)
    | (1), (1), (2), (2), (2)
    | (1), (2), (0), (0), (0)
    | (1), (2), (0), (0), (1)
    | (1), (2), (0), (0), (2)
    | (1), (2), (0), (1), (0)
    | (1), (2), (0), (1), (1)
    | (1), (2), (0), (1), (2)
    | (1), (2), (0), (2), (0)
    | (1), (2), (0), (2), (1)
    | (1), (2), (0), (2), (2)
    | (1), (2), (1), (0), (0)
    | (1), (2), (1), (0), (1)
    | (1), (2), (1), (0), (2)
    | (1), (2), (1), (1), (0)
    | (1), (2), (1), (1), (1)
    | (1), (2), (1), (1), (2)
    | (1), (2), (1), (2), (0)
    | (1), (2), (1), (2), (1)
    | (1), (2), (1), (2), (2)
    | (1), (2), (2), (0), (0)
    | (1), (2), (2), (0), (1)
    | (1), (2), (2), (0), (2)
    | (1), (2), (2), (1), (0)
    | (1), (2), (2), (1), (1)
    | (1), (2), (2), (1), (2)
    | (1), (2), (2), (2), (0)
    | (1), (2), (2), (2), (1)
    | (1), (2), (2), (2), (2)
    | (2), (0), (0), (0), (0)
    | (2), (0), (0), (0), (1)
    | (2), (0), (0), (0), (2)
    | (2), (0), (0), (1), (0)
    | (2), (0), (0), (1), (1)
    | (2), (0), (0), (1), (2)
    | (2), (0), (0), (2), (0)
    | (2), (0), (0), (2), (1)
    | (2), (0), (0), (2), (2)
    | (2), (0), (1), (0), (0)
    | (2), (0), (1), (0), (1)
    | (2), (0), (1), (0), (2)
    | (2), (0), (1), (1), (0)
    | (2), (0), (1), (1), (1)
    | (2), (0), (1), (1), (2)
    | (2), (0), (1), (2), (0)
    | (2), (0), (1), (2), (1)
    | (2), (0), (1), (2), (2)
    | (2), (0), (2), (0), (0)
    | (2), (0), (2), (0), (1)
    | (2), (0), (2), (0), (2)
    | (2), (0), (2), (1), (0)
    | (2), (0), (2), (1), (1)
    | (2), (0), (2), (1), (2)
    | (2), (0), (2), (2), (0)
    | (2), (0), (2), (2), (1)
    | (2), (0), (2), (2), (2)
    | (2), (1), (0), (0), (0)
    | (2), (1), (0), (0), (1)
    | (2), (1), (0), (0), (2)
    | (2), (1), (0), (1), (0)
    | (2), (1), (0), (1), (1)
    | (2), (1), (0), (1), (2)
    | (2), (1), (0), (2), (0)
    | (2), (1), (0), (2), (1)
    | (2), (1), (0), (2), (2)
    | (2), (1), (1), (0), (0)
    | (2), (1), (1), (0), (1)
    | (2), (1), (1), (0), (2)
    | (2), (1), (1), (1), (0)
    | (2), (1), (1), (1), (1)
    | (2), (1), (1), (1), (2)
    | (2), (1), (1), (2), (0)
    | (2), (1), (1), (2), (1)
    | (2), (1), (1), (2), (2)
    | (2), (1), (2), (0), (0)
    | (2), (1), (2), (0), (1)
    | (2), (1), (2), (0), (2)
    | (2), (1), (2), (1), (0)
    | (2), (1), (2), (1), (1)
    | (2), (1), (2), (1), (2)
    | (2), (1), (2), (2), (0)
    | (2), (1), (2), (2), (1)
    | (2), (1), (2), (2), (2)
    | (2), (2), (0), (0), (0)
    | (2), (2), (0), (0), (1)
    | (2), (2), (0), (0), (2)
    | (2), (2), (0), (1), (0)
    | (2), (2), (0), (1), (1)
    | (2), (2), (0), (1), (2)
    | (2), (2), (0), (2), (0)
    | (2), (2), (0), (2), (1)
    | (2), (2), (0), (2), (2)
    | (2), (2), (1), (0), (0)
    | (2), (2), (1), (0), (1)
    | (2), (2), (1), (0), (2)
    | (2), (2), (1), (1), (0)
    | (2), (2), (1), (1), (1)
    | (2), (2), (1), (1), (2)
    | (2), (2), (1), (2), (0)
    | (2), (2), (1), (2), (1)
    | (2), (2), (1), (2), (2)
    | (2), (2), (2), (0), (0)
    | (2), (2), (2), (0), (1)
    | (2), (2), (2), (0), (2)
    | (2), (2), (2), (1), (0)
    | (2), (2), (2), (1), (1)
    | (2), (2), (2), (1), (2)
    | (2), (2), (2), (2), (0)
    | (2), (2), (2), (2), (1)
    | (2), (2), (2), (2), (2) => simp[add',Digit.half_add3, one_zero_eq_zero_one', one_one_eq_zero_two', two_zero_eq_zero_two', two_one_eq_one_two', assoc]
  }
}

theorem add'.not_ε{x y:Digits}{c:Digit}(h:add' x y c = ε):x = ε ∧ y = ε ∧ c = (0) := by{
  match y with
  | ε => simp at *; exact add''.not_ε h
  | _::_ => match x with
    | ε => simp at h; have :=add''.not_ε h; contradiction
    | _::_ => rw[add'] at h; contradiction
}

theorem add'.not_ε'{x:Digits}(h:x ≠ ε)(y:Digits)(c:Digit):add' x y c ≠ ε := by{
  intro h'
  exact h (not_ε h').left
}

theorem add'.not_ε''(x:Digits){y:Digits}(h:y ≠ ε)(c:Digit):add' x y c ≠ ε := by{
  intro h'
  exact h (not_ε h').right.left
}

theorem add'.not_ε'''(x y:Digits){c:Digit}(h:c ≠ (0)):add' x y c ≠ ε := by{
  intro h'
  exact h (not_ε h').right.right
}
end add'_property

def add(x y:Digits):=
  add' x y (0)

notation:65 lhs:65 " + " rhs:66 => add lhs rhs

section add_property
theorem add.comm(x y:Digits):x + y = y + x:=
  add'.comm x y _

theorem add.assoc(x y z:Digits):(x + y) + z = x + (y + z):=
  add'.assoc x y z _ _

@[simp] theorem add.add_ε(x:Digits):x + ε = x:=by simp[add]
@[simp] theorem add.ε_add(x:Digits):ε + x = x:=by simp[comm]

theorem tail_eq_tail_zero_add''(x:Digits)(d:Digit):x::d=add'' (x::(0)) d:=by{
  match d with
  | (0) | (1) | (2) => simp[add'', Digit.half_add3]
}

theorem add_not_zero_digit(x:Digits){d:Digit}(h:d≠(0)):x + ε::d = x.add'' d:=by{
  match x with
  | ε => match d with | (1) | (2) => simp[add'']
  | x'::xd => {
    match xd, d with
    | (0), (0)
    | (0), (1)
    | (0), (2)
    | (1), (0)
    | (1), (1)
    | (1), (2)
    | (2), (0)
    | (2), (1)
    | (2), (2) => simp[add,add',add'']
  }
}

theorem add.not_ε{x y:Digits}(h:x + y = ε):x = ε ∧ y = ε:=by{
  have h:=add'.not_ε h
  exact And.intro h.left h.right.left
}

theorem add.not_ε'{x:Digits}(h:x ≠ ε)(y:Digits):x + y ≠ ε:=by{
  intro h'
  exact h (not_ε h').left
}

theorem add.not_ε''(x:Digits){y:Digits}(h:y ≠ ε):x + y ≠ ε:=by{
  intro h'
  exact h (not_ε h').right
}
end add_property

end Digits
end wkmath
